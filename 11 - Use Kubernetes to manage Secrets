# Use Kubernetes to manage Secrets

Step 1 - Start Kubernetes
launch.sh

# Step 2 - Create Secrets
username=$(echo -n "admin" | base64)

password=$(echo -n "a62fjbd37942dcs" | base64)

cat << EOF  >> secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
type: Opaque
data:
  username: $username
  password: $password
EOF

kubectl create -f secret.yaml

kubectl get secrets

# Step 3 - Consume via Environment Variables
cat << EOF >> secret-env.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
    - name: mycontainer
      image: alpine:latest
      command: ["sleep", "9999"]
      env:
        - name: SECRET_USERNAME
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: username
        - name: SECRET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: password
  restartPolicy: Never
EOF

kubectl create -f secret-env.yaml

kubectl exec -it secret-env-pod env | grep SECRET_

kubectl get po

Step 4 - Consume via Volumes
cat << EOF >> secret-pod.yaml
piVersion: v1
kind: Pod
metadata:
  name: secret-vol-pod
spec:
  volumes:
  - name: secret-volume
    secret:
      secretName: test-secret
  containers:
    - name: test-container
      image: alpine:latest
      command: ["sleep", "9999"]
      volumeMounts:
          - name: secret-volume
            mountPath: /etc/secret-volume
EOF

kubectl create -f secret-pod.yaml

kubectl exec -it secret-vol-pod ls /etc/secret-volume

kubectl exec -it secret-vol-pod cat /etc/secret-volume/username

kubectl exec -it secret-vol-pod cat /etc/secret-volume/password
