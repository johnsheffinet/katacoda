# Services and Networking (13%)

# 144. Create nginx pod with app=nginx label and port=80
kubectl delete po/nginx
kubectl run nginx --generator=run-pod/v1 --image=nginx --labels="app=nginx" --port=80 && \
kubectl wait --for=condition=Ready po/nginx && \
kubectl get po/nginx --show-labels
export IP=$(kubectl get po/nginx --output=jsonpath="{.status.podIP}") && \
export PORT=$(kubectl get po/nginx --output=jsonpath="{.spec.containers[?(@.name=='nginx')].ports[0].containerPort}") && \
echo $IP:$PORT && \
curl $IP:$PORT
# Answer
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    app: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
EOF
kubectl create -f nginx.yaml

# 145. Create nginx service with app=nginx selector 
kubectl delete svc/nginx
kubectl create svc clusterip nginx --tcp=80:80 && \
kubectl get svc/nginx --output=wide
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}") && \
echo $IP:$PORT && \
curl $IP:$PORT
# Answer
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
EOF
kubectl create -f nginx.yaml

# 146. Show labels for nginx pod; Show selector for nginx service
kubectl get po/nginx --show-labels && \
kubectl get svc/nginx --output=wide
# Answer
kubectl get po nginx --show-labels
kubectl get svc nginx -o wide

# 147. Expose nginx pod and show labels for nginx service
kubectl delete svc/nginx
kubectl expose po/nginx --port=80 --target-port=80 && \
kubectl get svc/nginx --output=wide
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}") && \
echo $IP:$PORT && \
curl $IP:$PORT
# Answer
kubectl delete svc nginx
kubectl expose po nginx --port=80 --target-port=80
kubectl get svc -l app=nginx

# 148. Expose nginx pod with NodePort type
kubectl delete svc/nginx
kubectl expose po/nginx --port=80 --target-port=80 --type=NodePort && \
kubectl get svc/nginx --output=wide
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}") && \
echo $IP:$PORT && \
curl $IP:$PORT
curl $IP:$PORT
# Answer
kubectl delete svc nginx
kubectl expose po nginx --port=80 --type=NodePort

# 149. Create busybox pod that gets index.html page from nginx service
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}")
kubectl run busybox --generator=run-pod/v1 --image=busybox --rm -it -- /bin/sh -c "wget --spider --timeout=1 nginx; sleep 3600"
# Answer
kubectl get svc nginx -o wide
kubectl run busybox --restart=Never --image=busybox --rm -it  -- wget -o- <Cluster IP>:80

# 150. Create denyingress network policy that denies all ingress traffic
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: nginx
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
EOF
kubectl create --filename=nginx.yaml && \
kubectl get networkpolicy/nginx
kubectl run busybox --generator=run-pod/v1 --image=busybox --rm -it -- /bin/sh -c "wget --spider --timeout=1 nginx; sleep 3600" && \
kubectl run busybox --generator=run-pod/v1 --image=busybox --labels="access=nginx" --rm -it -- /bin/sh -c "wget --spider --timeout=1 nginx; sleep 3600"
# Answer
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes:
  - Ingress
EOF
kubectl create -f nginx.yaml
