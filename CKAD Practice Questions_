# Observability (18%)
kubectl explain pod.spec.containers.livenessProbe
kubectl explain pod.spec.containers.readinessProbe&
 
# 132. Create liveness pod with port 80 and http liveness probe on / path and port 80.
rm liveness.yaml
cat << EOF >> liveness.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: liveness
  name: liveness
spec:
  containers:
  - command["/server"]
    image: k8s.gcr.io/liveness
    name: liveness
    ports:
    - containerPort: 80
    livenessProbe:
      httpGet:
        path: /
        port: 80
EOF
kubectl delete po/liveness
kubectl create --filename=liveness.yaml && \
kubectl wait --for=condition=Ready po/liveness && \
kubectl get po/liveness --watch
# Answer
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    ports:
    - containerPort: 80
    readinessProbe:
      httpGet:
        path: /
        port: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
EOF
kubectl create -f nginx.yaml
kubectl describe pod nginx | grep -i readiness
kubectl delete pod nginx

# 133. Create liveness pod with port=80 and http liveness probe on /healthz path and port 80.
rm liveness.yaml
cat << EOF >> liveness.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: liveness
  name: liveness
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/liveness
    args:
    - /server
    livenessProbe:
      httpGet:
        path: /healthz
        port: 80
        httpHeaders:
        - name: Custom-Header
          value: Awesome
      initialDelaySeconds: 3
      periodSeconds: 3
EOF
kubectl delete po/liveness
kubectl create --filename=liveness.yaml && \
kubectl get po/liveness --watch
# Answer
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    ports:
    - containerPort: 80
    livenessProbe:
      httpGet:
        path: /healthz
        port: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
EOF
kubectl create -f nginx.yaml
kubectl describe pod nginx | grep -i readiness
kubectl delete po nginx

# 134. Create readiness pod with port=80 and http readiness probe on /healthz path and port 80.
rm readiness.yaml
cat << EOF >> readiness.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: readiness
  name: readiness
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/liveness
    args:
    - /server
    livenessProbe:
      httpGet:
        path: /healthz
        port: 80
        httpHeaders:
        - name: Custom-Header
          value: Awesome
      initialDelaySeconds: 3
      periodSeconds: 3
# 132. Create liveness pod with port=80 and http liveness probe on / path and port 80.
rm liveness.yaml
cat << EOF >> liveness.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: liveness
  name: liveness
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/liveness
    ports:
    - containerPort: 80
    command["/server"]
    livenessProbe:
      httpGet:
        path: /
        port: 80
EOF
kubectl delete po/liveness
kubectl create --filename=liveness.yaml && \
kubectl get po/liveness --watchEOF
kubectl delete po/readiness
kubectl create --filename=readiness.yaml && \
kubectl get po/readiness --watch
# Answer
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    ports:
    - containerPort: 80
    livenessProbe:
      httpGet:
        path: /healthz
        port: 80
    readinessProbe:
      httpGet:
        path: /
        port: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
EOF
kubectl create -f nginx.yaml
kubectl describe pod nginx | grep -i readiness
kubectl describe pod nginx | grep -i liveness

# 135. Show documentation for readiness and liveness probes.
kubectl explain pods.spec.containers.readinessProbe && \
kubectl explain pods.spec.containers.livenessProbe
# Answer
kubectl explain Pod.spec.containers.livenessProbe
kubectl explain Pod.spec.containers.readinessProbe

# 136. Create liveness pod with port=80 and http liveness and readiness probes on / path and port 80 that initially waits 20 seconds before checking and thereafter continuously checks every 25 seconds.
rm liveness.yaml
cat << EOF >> liveness.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: liveness
  name: liveness
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/liveness
    ports:
    - containerPort: 80
    command["/server"]
    livenessProbe:
      httpGet:
        path: /
        port: 80
EOF
kubectl delete po/liveness
kubectl create --filename=liveness.yaml && \
kubectl get po/liveness --watch
# Answer
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    ports:
    - containerPort: 80
    livenessProbe:
      initialDelaySeconds: 20
      periodSeconds: 25
      httpGet:
        path: /healthz
        port: 80
    readinessProbe:
      initialDelaySeconds: 20
      periodSeconds: 25
      httpGet:
        path: /
        port: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
EOF
kubectl create -f nginx-pod.yaml

# 137. Create busybox pod that runs “echo I am from busybox pod; sleep 3600;” command and show logs.

# Answer
kubectl run busybox --restart=Never --image=busybox -- /bin/sh -c "echo I am from busybox pod; sleep 3600;"
kubectl logs busybox

# 138. Show logs from busybox pod.

# Answer
kubectl logs busybox

# 139. Show all events sorted by timestamp.

# Answer
kubectl get events --sort-by=.metadata.creationTimestamp

# 140. Create alpine pod that runs ”while true; do echo ‘Hi I am from alpine’; sleep 5; done” command and show logs.

# Answer
kubectl run hello --restart=Never --image=alpine -- /bin/sh -c "while true; do echo 'Hi I am from Alpine'; sleep 5;done"
kubectl logs hello --follow 

# 141. Fix pod not running in https://gist.githubusercontent.com/bbachi/212168375b39e36e2e2984c097167b00/raw/1fd63509c3ae3a3d3da844640fb4cca744543c1c/not-running.yml file.

# Answer
kubectl create -f https://gist.githubusercontent.com/bbachi/212168375b39e36e2e2984c097167b00/raw/1fd63509c3ae3a3d3da844640fb4cca744543c1c/not-running.yml
kubectl get pod not-running
kubectl describe pod not-running
kubectl set image pod/not-running not-running=nginx

# 142. Find and fix pod not running in https://gist.githubusercontent.com/bbachi/1f001f10337234d46806929d12245397/raw/84b7295fb077f15de979fec5b3f7a13fc69c6d83/problem-pod.yaml file.

# Answer
kubectl create -f https://gist.githubusercontent.com/bbachi/1f001f10337234d46806929d12245397/raw/84b7295fb077f15de979fec5b3f7a13fc69c6d83/problem-pod.yaml
kubectl get po --all-namespaces
kubectl get po -n namespace2
kubectl set image pod/pod2 pod2=nginx -n namespace2
kubectl get po -n namespace2

# 143. Show compute and memory usage for top 3 pods.

# Answer
kubectl top pod --all-namespaces | sort --reverse --key 3 --numeric | head -3

# Services and Networking (13%)

# 144. Create nginx pod with app=nginx label and port=80
kubectl delete po/nginx
kubectl run nginx --generator=run-pod/v1 --image=nginx --labels="app=nginx" --port=80 && \
kubectl wait --for=condition=Ready po/nginx && \
kubectl get po/nginx --show-labels
export IP=$(kubectl get po/nginx --output=jsonpath="{.status.podIP}") && \
export PORT=$(kubectl get po/nginx --output=jsonpath="{.spec.containers[?(@.name=='nginx')].ports[0].containerPort}") && \
echo $IP:$PORT && \
curl $IP:$PORT
# Answer
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    app: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
EOF
kubectl create -f nginx.yaml

# 145. Create nginx service with app=nginx selector 
kubectl delete svc/nginx
kubectl create svc clusterip nginx --tcp=80:80 && \
kubectl get svc/nginx --output=wide
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}") && \
echo $IP:$PORT && \
curl $IP:$PORT
# Answer
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
EOF
kubectl create -f nginx.yaml

# 146. Show labels for nginx pod; Show selector for nginx service
kubectl get po/nginx --show-labels && \
kubectl get svc/nginx --output=wide
# Answer
kubectl get po nginx --show-labels
kubectl get svc nginx -o wide

# 147. Expose nginx pod and show labels for nginx service
kubectl delete svc/nginx
kubectl expose po/nginx --port=80 --target-port=80 && \
kubectl get svc/nginx --output=wide
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}") && \
echo $IP:$PORT && \
curl $IP:$PORT
# Answer
kubectl delete svc nginx
kubectl expose po nginx --port=80 --target-port=80
kubectl get svc -l app=nginx

# 148. Expose nginx pod with NodePort type
kubectl delete svc/nginx
kubectl expose po/nginx --port=80 --target-port=80 --type=NodePort && \
kubectl get svc/nginx --output=wide
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}") && \
echo $IP:$PORT && \
curl $IP:$PORT
curl $IP:$PORT
# Answer
kubectl delete svc nginx
kubectl expose po nginx --port=80 --type=NodePort

# 149. Create busybox pod that gets index.html page from nginx service
export IP=$(kubectl get svc/nginx --output=jsonpath="{.spec.clusterIP}") && \
export PORT=$(kubectl get svc/nginx --output=jsonpath="{.spec.ports[0].port}")
kubectl run busybox --generator=run-pod/v1 --image=busybox --rm -it -- /bin/sh -c "wget --spider --timeout=1 nginx; sleep 3600"
# Answer
kubectl get svc nginx -o wide
kubectl run busybox --restart=Never --image=busybox --rm -it  -- wget -o- <Cluster IP>:80

# 150. Create denyingress network policy that denies all ingress traffic
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: access-nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: "true"
EOF
kubectl create --filename=nginx.yaml && \
kubectl get networkpolicy/nginx
kubectl run busybox --generator=run-pod/v1 --image=busybox --rm -it -- /bin/sh -c "wget --spider --timeout=1 nginx; sleep 3600" && \
kubectl run busybox --generator=run-pod/v1 --image=busybox --labels="access=nginx" --rm -it -- /bin/sh -c "wget --spider --timeout=1 nginx; sleep 3600"
# Answer
rm nginx.yaml
cat << EOF >> nginx.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes:
  - Ingress
EOF
kubectl create -f nginx.yaml
