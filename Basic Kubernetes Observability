# Basic Kubernetes Observability

# Your Kubernetes Cluster
kubectl version --short && \
kubectl get componentstatus && \
kubectl get nodes && \
kubectl cluster-info

helm version --short

export TOKEN=$(kubectl describe secret $(kubectl get secret | awk '/^dashboard-token-/{print $1}') | awk '$1=="token:"{print $2}') && \
echo -e "\n--- Copy and paste this token for dashboard access --\n$TOKEN\n---"

# Sample Application
kubectl create deployment random-logger \
--image=chentex/random-logger

kubectl scale deployment/random-logger \
--replicas=3

kubectl get po

# Resource Inspection
The running state of an application can be observed through a variety of kubectl describe commands across various resources.

Inspect the whole cluster

kubectl cluster-info

or more verbose (and really too much)

kubectl cluster-info dump --all-namespaces

Inspect this Kubernetes cluster only Worker node.

kubectl describe node node01

Inspect the last deployment.

kubectl describe deployment random-logger

Specifically, the replica state.

kubectl describe deployments | grep "Replicas:"

Inspect the 3 pods.

kubectl get pods

kubectl describe pods

Events
Kubernetes also maintains a list of events.

kubectl get events

Scaling is a type of event. Scale down the pod from 3 down to 2.

kubectl scale deployment/random-logger --replicas=2

Notice the last event will reflect the scaling request.

kubectl get events --sort-by=.metadata.creationTimestamp

These events are not to be confused with security audit logs which are also recorded.

Inspecting Containers
POD=$(kubectl get pod  -o jsonpath="{.items[0].metadata.name}")

kubectl exec $POD -- cat entrypoint.sh

kubectl exec -it $POD -- /bin/sh

kubectl exec $POD -- uptime

kubectl exec $POD -- ps

kubectl exec $POD -- stat -f /

kubectl exec $POD --container random-logger -- lsof

kubectl exec $POD --container random-logger -- iostat

kubectl exec $POD --container random-logger -- ls -a -l

# cAdvisor
kubectl get no

export NODE=master

kubectl proxy &

curl localhost:8001/api/v1/nodes/$NODE/proxy/stats/

curl localhost:8001/api/v1/nodes/$(kubectl get nodes -o=jsonpath="{.items[0].metadata.name}")/proxy/metrics

curl localhost:8001/metrics

# Metrics Server
helm install stable/metrics-server \
--name metrics-server \
--namespace kube-system \
--set args[0]="--kubelet-preferred-address-types=InternalIP" \
--set args[1]="--kubelet-insecure-tls"

kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes"

kubectl top node
