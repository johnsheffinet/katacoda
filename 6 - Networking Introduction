# Networking Introduction

# Step 1 - Cluster IP
cat << EOF >> clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-clusterip-svc
  labels:
    app: webapp1-clusterip
spec:
  ports:
  - port: 80
  selector:
    app: webapp1-clusterip
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-clusterip-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-clusterip
    spec:
      containers:
      - name: webapp1-clusterip-pod
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
EOF

kubectl apply -f clusterip.yaml

kubectl get po

kubectl get svc

kubectl describe svc/webapp1-clusterip-svc

export CLUSTER_IP=$(kubectl get svc/webapp1-clusterip-svc -o go-template='{{(index .spec.clusterIP)}}')

echo CLUSTER_IP=$CLUSTER_IP

curl $CLUSTER_IP:80

# Step 2 - Target Port
cat << EOF >> clusterip-target.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-clusterip-targetport-svc
  labels:
    app: webapp1-clusterip-targetport
spec:
  ports:
  - port: 8080
    targetPort: 80
  selector:
    app: webapp1-clusterip-targetport
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-clusterip-targetport-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-clusterip-targetport
    spec:
      containers:
      - name: webapp1-clusterip-targetport-pod
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
EOF

kubectl apply -f clusterip-target.yaml

kubectl get po

kubectl get svc

kubectl describe svc/webapp1-clusterip-targetport-svc

export CLUSTER_IP=$(kubectl get svc/webapp1-clusterip-targetport-svc -o go-template='{{(index .spec.clusterIP)}}')

echo CLUSTER_IP=$CLUSTER_IP

curl $CLUSTER_IP:8080

# Step 3 - NodePort
cat << EOF >> nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-nodeport-svc
  labels:
    app: webapp1-nodeport
spec:
  type: NodePort
  ports:
  - port: 80
    nodePort: 30080
  selector:
    app: webapp1-nodeport
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-nodeport-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-nodeport
    spec:
      containers:
      - name: webapp1-nodeport-pod
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
EOF

kubectl apply -f nodeport.yaml

kubectl get po

kubectl get svc

kubectl describe svc/webapp1-nodeport-svc

curl 172.17.0.37:30080

# Step 4 - External IPs
cat << EOF >> externalip.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-externalip-svc
  labels:
    app: webapp1-externalip
spec:
  ports:
  - port: 80
  externalIPs:
  - 172.17.0.37
  selector:
    app: webapp1-externalip
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-externalip-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-externalip
    spec:
      containers:
      - name: webapp1-externalip-pod
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
EOF

kubectl apply -f externalip.yaml

kubectl get po

kubectl get svc

kubectl describe svc/webapp1-externalip-svc

curl 172.17.0.37

# Step 5 - Load Balancer
cat << EOF >> loadbalancer.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-loadbalancer-svc
  labels:
    app: webapp1-loadbalancer
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: webapp1-loadbalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-loadbalancer-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-loadbalancer
    spec:
      containers:
      - name: webapp1-loadbalancer-pod
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
EOF

kubectl apply -f cloudprovider.yaml

kubectl get po -n kube-system

kubectl apply -f loadbalancer.yaml

kubectl get po

kubectl get svc

kubectl describe svc/webapp1-loadbalancer-svc

export LoadBalancerIP=$(kubectl get svc/webapp1-loadbalancer-svc -o go-template='{{(index .status.loadBalancer.ingress 0).ip}}')

echo LoadBalancerIP=$LoadBalancerIP

curl $LoadBalancerIP
