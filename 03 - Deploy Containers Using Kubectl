# Deploy Containers Using Kubectl
# Step 1 - Launch Cluster
minikube version

minikube start && \
minikube status

kubectl version --short

kubectl cluster-info

kubectl get cs,no

# Step 2 - Create Namespace & Context
kubectl create ns bootcamp && \
kubectl get ns/bootcamp

kubectl config set-context bc \
--cluster=minikube \
--namespace=bootcamp \
--user=minikube && \
kubectl config view

kubectl config use-context bc && \
kubectl config current-context

# Step 3 - Create Deployment
kubectl create deploy kubernetes-bootcamp \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1

sleep 3s 

kubectl get deploy/kubernetes-bootcamp

kubectl get po \
-l=app=kubernetes-bootcamp

# Step 4 - Expose Deployment
kubectl expose deploy/kubernetes-bootcamp \
--type=NodePort \
--port=8000 \
--target-port=8080 && \
kubectl describe svc/kubernetes-bootcamp

export SVC_IP=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.clusterIP}') && \
echo SVC_IP: $SVC_IP

export SVC_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.ports[0].port}') && \
echo SVC_PORT: $SVC_PORT

export NODE_IP=$(minikube ip) && \
echo NODE_IP: $NODE_IP

export NODE_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.ports[0].nodePort}') && \
echo NODE_PORT: $NODE_PORT

export POD_NAME=$(kubectl get po -l=app=kubernetes-bootcamp --output=jsonpath='{.items[0].metadata.name}') && \
echo POD_NAME: $POD_NAME

export POD_IP=$(kubectl get po/$POD_NAME --output=jsonpath='{.status.podIP}') && \
echo POD_IP: $POD_IP

export POD_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.ports[0].targetPort}') && \
echo POD_PORT: $POD_PORT

curl $NODE_IP:$NODE_PORT

curl $SVC_IP:$SVC_PORT

curl $POD_IP:$POD_PORT

# Step 5 - Scale Deployment
kubectl scale deploy/kubernetes-bootcamp \
--replicas=3

sleep 3s 

kubectl get deploy/kubernetes-bootcamp

kubectl get po \
-l=app=kubernetes-bootcamp

for (( i=0; i<3; i++ ))
do  
  curl $NODE_IP:$NODE_PORT
  sleep 2s
done

# Step 6 - Run Deployment
# Step 7 - View Pod
# Step 8 - Update Deployment
# Step 9 - Delete Service, Deployment, Context & Namespace

# Step 6 - Create, Expose & Scale Deploy
kubectl run app \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1 \
--replicas=3 \
--expose=true \
--port=$POD_PORT \
--service-overrides='{"apiVersion": "v1", "spec": {"type": "NodePort", "ports": [{"port": $SVC_PORT, "targetPort": $POD_PORT}]}}' && \
kubectl get deploy/app && \
kubectl get svc/app

export APP_NODE_PORT=$(kubectl get svc --namespace=bootcamp --output=jsonpath='{.items[*].spec.ports[0].nodePort}') && \
echo $APP_NODE_PORT

curl $(minikube ip):$APP_NODE_PORT

# Step 7 - View Pod
export POD_NAME=$(kubectl get po --output=jsonpath='{.items[*].metadata.name}') && \
echo $POD_NAME

kubectl logs $POD_NAME \
--namespace=bootcamp

kubectl exec $POD_NAME curl localhost:$POD_PORT \
--namespace=bootcamp

# Step 8 - Update Deploy
kubectl label po $POD_NAME app=v1 \
--namespace=bootcamp

kubectl get po \
--label=app=v1 \
--namespace=bootcamp

kubectl set image deploy/app \
--image=kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2 \
--namespace=bootcamp

kubectl rollout status deploy/app \
--namespace=bootcamp

kubectl describe deploy/app \
--namespace=bootcamp

kubectl rollout undo deploy/app \
--namespace=bootcamp

kubectl describe deploy/app \
--namespace=bootcamp

# Step 9 - Delete Svc, Deploy & Ns
kubectl delete svc/app \
--namespace=bootcamp

kubectl delete deploy/app \
--namespace=bootcamp

kubectl delete ns/bootcamp
