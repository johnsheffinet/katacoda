# Deploy Containers Using Kubectl

# Step 1 - Launch Cluster
minikube version

minikube start && \
minikube status

kubectl version --short

kubectl cluster-info

kubectl get cs,no

# Step 2 - Create Namespace & Context
kubectl create ns bootcamp && \
kubectl get ns/bootcamp

kubectl config set-context bc \
--cluster=minikube \
--namespace=bootcamp \
--user=minikube && \
kubectl config view --output=jsonpath='{.contexts[?(@.name=="bc")].context.namespace}{"\n"}'

kubectl config use-context bc && \
kubectl config current-context

# Step 3 - Create Deploy
kubectl create deploy kubernetes-bootcamp \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1 && \
kubectl get deploy,po

# Step 4 - Expose Deploy
export SVC_PORT=8000 && \
echo $SVC_PORT

export POD_PORT=8080 && \
echo $POD_PORT

kubectl expose deploy/kubernetes-bootcamp \
--type=NodePort \
--port=$SVC_PORT \
--target-port=$POD_PORT && \
kubectl describe svc/kubernetes-bootcamp

export NODE_PORT=$(kubectl get svc/kubernetes-bootcamp --output=jsonpath='{.spec.ports[0].nodePort}') && \
echo $NODE_PORT

curl $(minikube ip):$NODE_PORT

export SVC_IP=$(kubectl get svc/kubernetes-bootcamp --output=jsonpath='{.spec.clusterIP}') && \
echo $SVC_IP

curl $SVC_IP:$SVC_PORT

export POD_IP=$(kubectl get po --output=jsonpath='{.items[*].status.podIP}') && \
echo $POD_IP

curl $POD_IP:$POD_PORT

# Step 5 - Scale Deploy
kubectl scale deploy/kubernetes-bootcamp \
--replicas=3 && \
kubectl get deploy/kubernetes-bootcamp

curl $(minikube ip):$NODE_PORT

# Step 6 - Create, Expose & Scale Deploy
kubectl run app \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1 \
--replicas=3 \
--expose=true \
--port=$POD_PORT \
--service-overrides='{"apiVersion": "v1", "spec": {"type": "NodePort", "ports": [{"port": $SVC_PORT, "targetPort": $POD_PORT}]}}' && \
kubectl get deploy/app && \
kubectl get svc/app

export APP_NODE_PORT=$(kubectl get svc --namespace=bootcamp --output=jsonpath='{.items[*].spec.ports[0].nodePort}') && \
echo $APP_NODE_PORT

curl $(minikube ip):$APP_NODE_PORT

# Step 7 - View Pod
export POD_NAME=$(kubectl get po --output=jsonpath='{.items[*].metadata.name}') && \
echo $POD_NAME

kubectl logs $POD_NAME \
--namespace=bootcamp

kubectl exec $POD_NAME curl localhost:$POD_PORT \
--namespace=bootcamp

# Step 8 - Update Deploy
kubectl label po $POD_NAME app=v1 \
--namespace=bootcamp

kubectl get po \
--label=app=v1 \
--namespace=bootcamp

kubectl set image deploy/app \
--image=kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2 \
--namespace=bootcamp

kubectl rollout status deploy/app \
--namespace=bootcamp

kubectl describe deploy/app \
--namespace=bootcamp

kubectl rollout undo deploy/app \
--namespace=bootcamp

kubectl describe deploy/app \
--namespace=bootcamp

# Step 9 - Delete Svc, Deploy & Ns
kubectl delete svc/app \
--namespace=bootcamp

kubectl delete deploy/app \
--namespace=bootcamp

kubectl delete ns/bootcamp
