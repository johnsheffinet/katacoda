### Deploy Containers Using Kubectl ###
###### Step 0 - Create Cluster ######
minikube version && \
minikube start --wait=true && \
minikube status

kubectl version --short && \
kubectl wait --for=condition=Ready no/minikube && \
kubectl cluster-info && \
kubectl get cs,no

###### Step 1 - Create Namespace & Context ######
kubectl create ns bootcamp && \
kubectl get ns/bootcamp

kubectl config set-context bc \
--cluster=minikube \
--namespace=bootcamp \
--user=minikube && \
kubectl config view

kubectl config use-context bc && \
kubectl config current-context

###### Step 2 - Create Deployment ######
kubectl create deploy kubernetes-bootcamp \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1 && \
kubectl rollout status deploy/kubernetes-bootcamp && \
kubectl get deploy/kubernetes-bootcamp

###### Step 3 - Expose Deployment ######
kubectl expose deploy/kubernetes-bootcamp \
--type=NodePort \
--port=8000 \
--target-port=8080

export SVC_IP=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.clusterIP}') && \
echo SVC_IP: $SVC_IP [$(kubectl describe svc/kubernetes-bootcamp | grep -w IP:)]

export SVC_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.ports[0].port}') && \
echo SVC_PORT: $SVC_PORT [$(kubectl describe svc/kubernetes-bootcamp | grep -w Port:)]

export NODE_IP=$(minikube ip) && \
echo NODE_IP: $NODE_IP

export NODE_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.ports[0].nodePort}') && \
echo NODE_PORT: $NODE_PORT [$(kubectl describe svc/kubernetes-bootcamp | grep -w NodePort:)]

export POD_NAME=$(kubectl get po -l=app=kubernetes-bootcamp --output=jsonpath='{.items[0].metadata.name}') && \
echo POD_NAME: $POD_NAME

export POD_IP=$(kubectl get po/$POD_NAME --output=jsonpath='{.status.podIP}') && \
echo POD_IP: $POD_IP [$(kubectl describe svc/kubernetes-bootcamp | grep -w Endpoints:)]

export POD_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="kubernetes-bootcamp")].spec.ports[0].targetPort}') && \
echo POD_PORT: $POD_PORT [$(kubectl describe svc/kubernetes-bootcamp | grep -w TargetPort:)]

curl --silent $NODE_IP:$NODE_PORT

curl --silent $SVC_IP:$SVC_PORT

curl --silent $POD_IP:$POD_PORT

###### Step 4 - Scale Deployment ######
kubectl scale deploy/kubernetes-bootcamp \
--replicas=3 && \
kubectl rollout status deploy/kubernetes-bootcamp && \
kubectl describe svc/kubernetes-bootcamp

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

###### Step 5 - View Container ######
export CONTAINER_NAME=$(kubectl get po/$POD_NAME --output=jsonpath='{.spec.containers[0].name}') && \
echo $CONTAINER_NAME

kubectl logs $POD_NAME \
--container=$CONTAINER_NAME

kubectl exec $POD_NAME \
--container=$CONTAINER_NAME \
-- curl --silent localhost:$POD_PORT

###### Step 6 - Update Deployment ######
kubectl label deploy/kubernetes-bootcamp ver=v1 && \
kubectl rollout status deploy/kubernetes-bootcamp && \
kubectl get deploy/kubernetes-bootcamp --show-labels

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

kubectl set image deploy/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2 && \
kubectl rollout status deploy/kubernetes-bootcamp && \
kubectl get deploy/kubernetes-bootcamp --output=jsonpath='{.spec.template.spec.containers[?(@.name=="kubernetes-bootcamp")].image}'

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

kubectl rollout undo deploy/kubernetes-bootcamp && \
kubectl rollout status deploy/kubernetes-bootcamp && \
kubectl get deploy/kubernetes-bootcamp --output=jsonpath='{.spec.template.spec.containers[?(@.name=="kubernetes-bootcamp")].image}'

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

###### Step 7 - Run Deployment ######
kubectl run k8s-bc \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1 \
--replicas=3 \
--expose=true \
--port=8080 \
--service-overrides='{"apiVersion": "v1", "spec": {"type": "NodePort", "ports": [{"port": 8000, "targetPort": 8080}]}}' && \
kubectl rollout status deploy/k8s-bc

export NODE_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-bc")].spec.ports[0].nodePort}') && \
echo NODE_PORT: $NODE_PORT [$(kubectl describe svc/k8s-bc | grep -w NodePort:)]

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

###### Step 8 - Run CronJob ######

###### Step 9 - Clean UP ######
kubectl delete svc/kubernetes-bootcamp && \
kubectl get svc

kubectl delete deploy/kubernetes-bootcamp && \
kubectl get deploy

kubectl config use-context minikube && \
kubectl config delete-context bc && \
kubectl config view && \
kubectl config current-context

kubectl delete ns/bootcamp && \
kubectl get ns
