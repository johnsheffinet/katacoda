### Deploy Containers Using YAML ###

###### Step 0 - Create Cluster ######

minikube version && \
minikube start --wait && \
minikube status

kubectl version --short && \
kubectl wait --for=condition=ready no/minikube && \
kubectl cluster-info && \
kubectl get cs,no

###### Step 1 - Create Namespace & Context ######

kubectl create ns k8s-ns --dry-run --output=yaml

cat << EOF >> ns.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: k8s-ns
spec: {}
EOF

kubectl create --filename=ns.yaml && \
kubectl get ns/k8s-ns

kubectl config set-context k8s-context --cluster=minikube --namespace=k8s-ns --user=minikube && \
kubectl config view && \
kubectl config use-context k8s-context && \
kubectl config current-context

###### Step 2 - Create Deployment ######

kubectl create deploy k8s-deploy \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1 \
--dry-run=true --output=yaml

cat << EOF >> deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: k8s-deploy
  name: k8s-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-deploy
  strategy: {}
  template:
    metadata:
      labels:
        app: k8s-deploy
    spec:
      containers:
      - image: gcr.io/google-samples/kubernetes-bootcamp:v1
        name: kubernetes-bootcamp
        resources: {}
EOF

kubectl create --filename=deploy.yaml && \
kubectl rollout status deploy/k8s-deploy && \
kubectl get deploy/k8s-deploy

###### Step 3 - Expose Deployment ######

kubectl expose deploy/k8s-deploy \
--type=NodePort \
--port=8000 \
--target-port=8080 \
--dry-run=true --output=yaml

cat << EOF >> svc.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: k8s-deploy
  name: k8s-deploy
spec:
  ports:
  - port: 8000
    protocol: TCP
    targetPort: 8080
  selector:
    app: k8s-deploy
  type: NodePort
EOF

kubectl create --filename=svc.yaml

export SVC_IP=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.clusterIP}') && \
echo SVC_IP: $SVC_IP [$(kubectl describe svc/k8s-deploy | grep -w IP:)]

export SVC_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.ports[0].port}') && \
echo SVC_PORT: $SVC_PORT [$(kubectl describe svc/k8s-deploy | grep -w Port:)]

export NODE_IP=$(minikube ip) && \
echo NODE_IP: $NODE_IP

export NODE_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.ports[0].nodePort}') && \
echo NODE_PORT: $NODE_PORT [$(kubectl describe svc/k8s-deploy | grep -w NodePort:)]

export POD_NAME=$(kubectl get po -l=app=k8s-deploy --output=jsonpath='{.items[0].metadata.name}') && \
echo POD_NAME: $POD_NAME

export POD_IP=$(kubectl get po/$POD_NAME --output=jsonpath='{.status.podIP}') && \
echo POD_IP: $POD_IP [$(kubectl describe svc/k8s-deploy | grep -w Endpoints:)]

export POD_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.ports[0].targetPort}') && \
echo POD_PORT: $POD_PORT [$(kubectl describe svc/k8s-deploy | grep -w TargetPort:)]

curl --silent $NODE_IP:$NODE_PORT

curl --silent $SVC_IP:$SVC_PORT

curl --silent $POD_IP:$POD_PORT

###### Step 4 - Scale Deployment ######

kubectl scale deploy/k8s-deploy \
--replicas=3 \
--dry-run --output=yaml

cat << EOF >> deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: k8s-deploy
  name: k8s-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: k8s-deploy
  strategy: {}
  template:
    metadata:
      labels:
        app: k8s-deploy
    spec:
      containers:
      - image: gcr.io/google-samples/kubernetes-bootcamp:v1
        name: kubernetes-bootcamp
        resources: {}
EOF

kubectl apply --filename=deploy.yaml && \
kubectl rollout status deploy/k8s-deploy && \
kubectl describe svc/k8s-deploy

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

###### Step 5 - View Container ######

export CONTAINER_NAME=$(kubectl get po/$POD_NAME --output=jsonpath='{.spec.containers[0].name}') && \
echo $CONTAINER_NAME

kubectl logs $POD_NAME \
--container=$CONTAINER_NAME

kubectl exec $POD_NAME \
--container=$CONTAINER_NAME \
-- curl --silent localhost:$POD_PORT

###### Step 6 - Update Deployment ######

kubectl label deploy/k8s-deploy ver=v1 \
--dry-run=true --output=yaml

cat << EOF >> deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: k8s-deploy
    ver: v1
  name: k8s-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: k8s-deploy
  strategy: {}
  template:
    metadata:
      labels:
        app: k8s-deploy
    spec:
      containers:
      - image: gcr.io/google-samples/kubernetes-bootcamp:v1
        name: kubernetes-bootcamp
        resources: {}
EOF

kubectl apply --filename=deploy.yaml && \
kubectl rollout status deploy/k8s-deploy && \
kubectl get deploy/k8s-deploy --show-labels=true

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

**kubectl set image deploy/k8s-deploy k8s-deploy=jocatalin/kubernetes-bootcamp:v2 && \
kubectl rollout status deploy/k8s-deploy && \
kubectl get deploy/k8s-deploy --output=jsonpath='{.spec.template.spec.containers[?(@.name=="kubernetes-bootcamp")].image}'

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

kubectl rollout undo deploy/k8s-deploy && \
kubectl rollout status deploy/k8s-deploy && \
kubectl get deploy/k8s-deploy --output=jsonpath='{.spec.template.spec.containers[?(@.name=="kubernetes-bootcamp")].image}'

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

###### Step 7 - Run Deployment ######

kubectl run k8s-run \
--image=gcr.io/google-samples/kubernetes-bootcamp:v1 \
--replicas=3 \
--expose=true \
--port=8080 \
--service-overrides='{"apiVersion": "v1", "spec": {"type": "NodePort", "ports": [{"port": 8000, "targetPort": 8080}]}}' && \
kubectl rollout status deploy/k8s-run && \
kubectl get po -l=run=k8s-run && \
kubectl get deploy/k8s-run && \
kubectl describe svc/k8s-run

export NODE_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-run")].spec.ports[0].nodePort}') && \
echo NODE_PORT: $NODE_PORT [$(kubectl describe svc/k8s-run | grep -w NodePort:)]

for (( i=0; i<3; i++ ))
do  
  sleep 5s
  curl --silent $NODE_IP:$NODE_PORT
done

###### Step 8 - Create Job & Cronjob ######

kubectl create job k8s-job \
--image=busybox \
-- bin/sh -c 'date; echo Hello from Kubernetes cluster' && \
kubectl wait --for=condition=complete job/k8s-job && \
kubectl get job/k8s-job && \
kubectl logs job/k8s-job

kubectl create cronjob k8s-cronjob \
--schedule='*/1 * * * *' \
--image=busybox \
-- bin/sh -c 'date; echo Hello from Kubernetes cluster' && \
kubectl get cronjob/k8s-cronjob

export POD_NAME=$(kubectl get po --output=jsonpath='{.items[0].metadata.name}') && \
echo POD_NAME: $POD_NAME

kubectl logs $POD_NAME

###### Step 9 - Clean UP ######

kubectl delete svc/k8s-deploy && \
kubectl get svc

kubectl delete deploy/k8s-deploy && \
kubectl get deploy

kubectl config use-context minikube && \
kubectl config delete-context k8s-context && \
kubectl config view && \
kubectl config current-context

kubectl delete ns/k8s-ns && \
kubectl get ns

###### Step 1 - Create Namespace & Context ######

cat << EOF >> ns.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: k8s-ns
spec:
  finalizers:
  - kubernetes
EOF

kubectl apply --filename ns.yaml && \
kubectl get ns/k8s-ns

kubectl config set-context k8s-context \
--cluster=minikube \
--namespace=k8s-ns \
--user=minikube && \
kubectl config view && \
kubectl config use-context k8s-context && \
kubectl config current-context

###### Step 2 - Create Deployment ######

cat << EOF >> deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: k8s-deploy
  name: k8s-deploy
  namespace: k8s-ns
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: k8s-deploy
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: k8s-deploy
    spec:
      containers:
      - image: gcr.io/google-samples/kubernetes-bootcamp:v1
        imagePullPolicy: IfNotPresent
        name: kubernetes-bootcamp
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
EOF

kubectl apply --filename=deploy.yaml && \
kubectl rollout status deploy/k8s-deploy && \
kubectl get deploy/k8s-deploy

###### Step 3 - Expose Deployment ######

cat << EOF >> svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: k8s-deploy
  name: k8s-deploy
  namespace: k8s-ns
spec:
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30026
    port: 8000
    protocol: TCP
    targetPort: 8080
  selector:
    app: k8s-deploy
  sessionAffinity: None
  type: NodePort
EOF

kubectl apply --filename=svc.yaml

export SVC_IP=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.clusterIP}') && \
echo SVC_IP: $SVC_IP [$(kubectl describe svc/k8s-deploy | grep -w IP:)]

export SVC_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.ports[0].port}') && \
echo SVC_PORT: $SVC_PORT [$(kubectl describe svc/k8s-deploy | grep -w Port:)]

export NODE_IP=$(minikube ip) && \
echo NODE_IP: $NODE_IP

export NODE_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.ports[0].nodePort}') && \
echo NODE_PORT: $NODE_PORT [$(kubectl describe svc/k8s-deploy | grep -w NodePort:)]

export POD_NAME=$(kubectl get po -l=app=k8s-deploy --output=jsonpath='{.items[0].metadata.name}') && \
echo POD_NAME: $POD_NAME

export POD_IP=$(kubectl get po/$POD_NAME --output=jsonpath='{.status.podIP}') && \
echo POD_IP: $POD_IP [$(kubectl describe svc/k8s-deploy | grep -w Endpoints:)]

export POD_PORT=$(kubectl get svc --output=jsonpath='{.items[?(@.metadata.name=="k8s-deploy")].spec.ports[0].targetPort}') && \
echo POD_PORT: $POD_PORT [$(kubectl describe svc/k8s-deploy | grep -w TargetPort:)]

curl --silent $NODE_IP:$NODE_PORT

curl --silent $SVC_IP:$SVC_PORT

curl --silent $POD_IP:$POD_PORT

###### Step 4 - Scale Deployment ######

cat << EOF >> deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: k8s-deploy
  name: k8s-deploy
  namespace: k8s-ns
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: k8s-deploy
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: k8s-deploy
    spec:
      containers:
      - image: gcr.io/google-samples/kubernetes-bootcamp:v1
        imagePullPolicy: IfNotPresent
        name: kubernetes-bootcamp
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
EOF

kubectl apply --filename=deploy.yaml && \
###### Step 5 - View Container ######
###### Step 6 - Update Deployment ######
###### Step 7 - Run Deployment ######
###### Step 8 - Create Job & Cronjob ######

---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    controller-uid: f87fca76-2cda-4f82-b93c-e6685d8b12c7
    job-name: k8s-job
  name: k8s-job
  namespace: k8s-ns
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  selector:
    matchLabels:
      controller-uid: f87fca76-2cda-4f82-b93c-e6685d8b12c7
  template:
    metadata:
      creationTimestamp: null
      labels:
        controller-uid: f87fca76-2cda-4f82-b93c-e6685d8b12c7
        job-name: k8s-job
    spec:
      containers:
      - command:
        - bin/sh
        - -c
        - date; echo Hello from Kubernetes cluster
        image: busybox
        imagePullPolicy: Always
        name: k8s-job
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: k8s-cronjob
  namespace: k8s-nsd-43bc-ad2a-8b0b35a6245f
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      name: k8s-cronjob
    spec:
      template:
        metadata:
        spec:
          containers:
          - command:
            - bin/sh
            - -c
            - date; echo Hello from Kubernetes cluster
            image: busybox
            imagePullPolicy: Always
            name: k8s-cronjob
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: '*/1 * * * *'
  successfulJobsHistoryLimit: 3
---


###### Step 9 - Delete Service, Deploy, Namespace & Context ######

kubectl config use-context minikube && \
kubectl config current-context && \
kubectl config delete-context k8s-context && \
kubectl config view

kubectl delete ns/k8s-ns && \
kubectl get ns

cat << EOF >> deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp1
spec:
  replicas: 5
  selector:
    matchLabels:
      app: webapp1
  template:
    metadata:
      labels:
        app: webapp1
    spec:
      containers:
      - name: webapp1
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
EOF

cat << EOF >> svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-svc
  labels:
    app: webapp1
spec:
  type: NodePort
  ports:
  - port: 80
    nodePort: 30080
  selector:
    app: webapp1
EOF

---
apiVersion: v1
kind: Service
metadata:
  name: k8s-run
  namespace: k8s-ns
spec:
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30977
    port: 8000
    protocol: TCP
    targetPort: 8080
  selector:
    run: k8s-run
  sessionAffinity: None
  type: NodePort
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: k8s-run
  name: k8s-run
  namespace: k8s-ns
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      run: k8s-run
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: k8s-run
    spec:
      containers:
      - image: gcr.io/google-samples/kubernetes-bootcamp:v1
        imagePullPolicy: IfNotPresent
        name: k8s-run
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---


